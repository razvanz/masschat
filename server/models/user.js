'use strict';

var _ = require('lodash'),
	mongoose = require('mongoose'),
	Schema = mongoose.Schema,
	crypto = require('crypto');

var validateLocalStrategyProperty = function (property) {
	return ((this.provider !== 'local' && !this.updated) || property.length);
};
var validateLocalStrategyPassword = function (password) {
	return (this.provider !== 'local' || (password && password.length > 6));
};

var userSchemaOpts = {
	collection: 'Users', // the collection in witch it will be saved
	safe: true, // mongodb will return errors in the callback
	strict: false, // so we can extend entities later on
	versionKey: '_ver' // the document revision prop name
};

var UserSchema = new Schema({
	firstName: {
		type: String,
		trim: true,
		default: '',
		validate: [validateLocalStrategyProperty, 'Please fill in your first name']
	},
	lastName: {
		type: String,
		trim: true,
		default: '',
		validate: [validateLocalStrategyProperty, 'Please fill in your last name']
	},
	displayName: {
		type: String,
		trim: true
	},
	email: {
		type: String,
		trim: true,
		default: '',
		validate: [validateLocalStrategyProperty, 'Please fill in your email'],
		match: [/.+\@.+\..+/, 'Please fill a valid email address']
	},
	username: {
		type: String,
		unique: 'testing error message',
		required: 'Please fill in a username',
		trim: true
	},
	password: {
		type: String,
		default: '',
		validate: [validateLocalStrategyPassword, 'Password should be longer']
	},
	salt: {
		type: String
	},
	provider: {
		type: String,
		required: 'Provider is required'
	},
	providerData: {},
	additionalProvidersData: {},
	roles: {
		type: [{
			type: String,
			enum: ['user', 'admin', 'guest', '*', 'su']
		}],
		default: ['user']
	},
	updated: {
		type: Date
	},
	/* For reset password */
	resetPasswordToken: {
		type: String
	},
	resetPasswordExpires: {
		type: Date
	},

	// metadata
	ldbId: {
		type: Schema.Types.ObjectId,
		ref: 'Banks'
	},
	deleted:{
		type: Boolean,
		default: false
	},
	silo: {
		type: Schema.Types.ObjectId,
		ref: 'Silo'
	},
	created: {
		type: Date,
		default: function(){return new Date().getTime();}
	},
	createdBy: {
		type: Schema.Types.ObjectId,
		ref: 'User'
	},
	modified: {
		type: Date,
		default: null
	},
	modifiedBy: {
		type: Schema.Types.ObjectId,
		ref: 'User'
	}
}, userSchemaOpts);

/**
 * Hook a pre save method to hash the password
 */
UserSchema.pre('save', function (next) {
	if (this.password && this.password.length > 6) {
		this.salt = new Buffer(crypto.randomBytes(16)
			.toString('base64'), 'base64');
		this.password = this.hashPassword(this.password);
	}

	next();
});

/**
 * Create instance method for hashing a password
 */
UserSchema.methods.hashPassword = function (password) {
	if (this.salt && password) {
		return crypto.pbkdf2Sync(password, this.salt, 10000, 64)
			.toString('base64');
	} else {
		return password;
	}
};

/**
 * Create instance method for authenticating user
 */
UserSchema.methods.authenticate = function (password) {
	return this.password === this.hashPassword(password);
};

/**
 * Find possible not used username
 */
UserSchema.statics.findUniqueUsername = function (username, suffix, callback) {
	var _this = this;
	var possibleUsername = username + (suffix || '');

	_this.findOne({
		username: possibleUsername
	}, function (err, user) {
		if (!err) {
			if (!user) {
				callback(possibleUsername);
			} else {
				return _this.findUniqueUsername(username, (suffix || 0) + 1, callback);
			}
		} else {
			callback(null);
		}
	});
};

var User = mongoose.model('User', UserSchema);

exports.schema = UserSchema;
exports.model = User;

// the methods

exports.all = function (callback) {
	return User.find()
		.exec(callback);
};

exports.allWithOpts = function (query, select, options, callback) {
	if (query._id) {
		query._id = mongoose.Types.ObjectId(query._id);
	}
	return User.find(query, select, options)
		.populate()
		.exec(callback);
};

exports.one = function (query, callback) {
	if (query._id) {
		query._id = mongoose.Types.ObjectId(query._id);
	}
	return User.findOne(query)
		.exec(callback);
};

exports.oneWithOpts = function (query, select, options, callback) {
	if (query._id) {
		query._id = mongoose.Types.ObjectId(query._id);
	}
	return User.findOne(query, select, options)
		.exec(callback);
};

exports.insert = function (currentUser, user, callback) {
	delete newUser._id;  // just let it be generated by MongoDB
	var newUser = new User(user);
	newUser.createdBy = currentUser._id;
	newUser.silo = currentUser.silo._id;
	return newUser.save(callback);
};

// needs to be updated
exports.update = function (currentUser, query, extend, callback) {
	// having the id is not mandatory but we might want it to ensure integrity.
	if (!query._id)
		return callback(
			new Error('You must specify an entry to update!'));
	else {
		query._id = mongoose.Types.ObjectId(query._id);
	}
	User.findOne(query, function (err, user) {
		if (err)
			return callback(err);
		else if (!user) {
			return callback(
				new Error('The entry to update is nonexistent!'));
		}
		user = _.extend(user, extend);
		user.modified = new Date()
			.getTime();
		user.modifiedBy = currentUser._id;
		user._ver = user._ver + 1;
		return user.save(callback);
	});
};

exports.remove = function (currentUser, query, callback) {
	if (!query._id)
		return callback(
			new Error('You must specify an entry to update!'));
	else {
		query._id = mongoose.Types.ObjectId(query._id);
	}
	User.findOne(query, function (err, user) {
		if (err)
			return callback(err);
		else if (!user) {
			return callback(
				new Error('The entry to delete is nonexistent!'));
		}
		return user.remove(callback);
	});
};
